% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mod_file_picker.R
\name{mod_file_picker_server}
\alias{mod_file_picker_server}
\title{file_picker Server Functions}
\usage{
mod_file_picker_server(
  id,
  files_df,
  selection = "single",
  file_identifier_column = "path",
  default_page_size = 10,
  use_bslib_theme = FALSE,
  ...
)
}
\arguments{
\item{id}{A unique identifier for the module instance.}

\item{files_df}{A data frame containing file information. This data frame
should have a column for file paths and any other relevant metadata. You
can use the \code{\link{get_all_project_files}} function to fetch all
project files along with their metadata from the SB File system
within Data Studio.This function returns a data frame containing
comprehensive file information, making it an ideal input for the
`mod_file_picker_server()` function.}

\item{selection}{A string specifying the selection mode. Can be either
'single' for single file selection or 'multiple' for multiple file
 selection. Defaults to 'single'.}

\item{file_identifier_column}{A string specifying the column name in
`files_df` from which the values of selected files will be returned.
 Defaults to `path`.}

\item{default_page_size}{Number of rows per page to display in the table.
Defaults to 10.}

\item{use_bslib_theme}{A logical value indicating whether to generate the
modal's UI using the \code{bslib} package. If \code{FALSE} (the default),
the regular UI will be generated. If \code{TRUE}, the UI will be generated
using the \code{bslib} package and its functions. Note that to use this
option, the main UI of the app must include the line
\code{theme = bslib::bs_theme()}. This requirement ensures the correct
 application of the \code{bslib} theme throughout the app.}

\item{...}{Additional parameters to be passed to the `reactable()` function
this module relies on.}
}
\value{
A reactive expression containing information about the selected
 files based on the specified `file_identifier_column`.
}
\description{
Server function of a Shiny module for selecting either a single
 file or multiple files to be used within the app. This module displays a
 modal dialog with a preview table of files and allows users to select files
 based on the specified `selection` mode ('single' or 'multiple'). Table
 columns are filterable, and different types of filters are available
 depending on the type of data in each column:
 \itemize{
   \item For numeric columns: a range slider filter allows users to filter
    the table by selecting a range of values.
   \item For factor columns: a drop down filter allows users to filter the
    table by selecting specific factor levels.
    \item For other data types: a basic filter using a case-insensitive text
     match is available.
  }
}
\details{
To incorporate this module into your Shiny app, you need to include
 both the UI and server functions in the appropriate places in your app
 code:
 \itemize{
   \item **UI Function**: Add `mod_file_picker_ui("file_picker_1")` to the
    UI part of your Shiny app where you want the action button to appear.
   \item **Server Function**: Add `mod_file_picker_server("file_picker_1", files_df)`
    to the server part of your Shiny app. Make sure to replace `files_df`
    with your actual data frame containing file information.
 }
}
\examples{
library(shiny)
library(sbShinyModules)
# library(bslib) # uncomment if you want to use a Bootstrap theme

# App's  UI
ui <- fluidPage(
  titlePanel("File Picker Module Examples"),
  # theme = bslib::bs_theme(), # uncomment if you want to use a Bootstrap theme
  sidebarLayout(
    sidebarPanel(
      # Single File Picker - UI
      fluidRow(
        h3("Single File Picker"),
        br(),
        sbShinyModules::mod_file_picker_ui("single_file_picker"),
        br(),
        h5("Selected File"),
        verbatimTextOutput("single_file_picker_selection", placeholder = TRUE)
      ),
      hr(),
      # Multiple Files Picker - UI
      fluidRow(
        h3("Multiple Files Picker"),
        br(),
        sbShinyModules::mod_file_picker_ui("multiple_files_picker"),
        br(),
        h5("Selected Files"),
        verbatimTextOutput("mult_files_picker_selection", placeholder = TRUE)
      )
    ),
    mainPanel(
      # Placeholder
    )
  )
)

# App's Server Logic
server <- function(input, output, session) {
  # ----------------------------- Load Files ----------------------------------
  # Load a built-in data frame for files
  files_df <- sbShinyModules::file_picker_example_data

  # Remove units (bytes) from size column and make it numeric so that it has
  # a range filter
  files_df$size <- as.numeric(gsub(" bytes", "", files_df$size))

  # Or fetch files from a provided directory (path) using the
  # get_all_project_files() utility function

  # files_df <- sbShinyModules::get_all_project_files(
  #   path = "/sbgenomics/project-files"
  # )

  # ---------------------------------------------------------------------------

  ## -------------------- Single File Picker - Server Code --------------------

  # Call the file picker module
  selected_files_single_picker <- sbShinyModules::mod_file_picker_server(
    id = "single_file_picker",
    files_df = files_df,
    # use_bslib_theme = TRUE, # uncomment if you want to use a Bootstrap theme
    selection = "single",
    default_page_size = 5
  )

  # Display selected files
  output$single_file_picker_selection <- renderPrint({
    validate(
      need(
        selected_files_single_picker(),
        "No file has been selected."
      )
    )
    cat(selected_files_single_picker(), sep = "\n")
  })
  # ---------------------------------------------------------------------------



  ## ----------------- Multiple Files Picker - Server Code --------------------

  # Call the file picker module
  selected_files_mult_picker <- sbShinyModules::mod_file_picker_server(
    id = "multiple_files_picker",
    files_df = files_df,
    # use_bslib_theme = TRUE, # uncomment if you want to use a Bootstrap theme
    selection = "multiple",
    default_page_size = 5
  )

  # Display selected files
  output$mult_files_picker_selection <- renderPrint({
    validate(
      need(
        selected_files_mult_picker(),
        "No files have been selected."
      )
    )
    cat(selected_files_mult_picker(), sep = "\n")
  })
  # ---------------------------------------------------------------------------
}

# Note: To use a Bootstrap theme, ensure you have the 'bslib' package
# installed and loaded in your app.
# 1. Uncomment `library(bslib)` at the beginning of the script.
# 2. Uncomment the `theme = bslib::bs_theme()` line in the UI section.
# 3. In the server logic, set `use_bslib_theme = TRUE` in the
# `mod_file_picker_server()` function calls.

# Run the Shiny app
shinyApp(ui, server)
}
\seealso{
\code{\link{mod_file_picker_ui}} for the corresponding server
 part of the module.
}
