% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mod_save_file_generic.R
\name{mod_save_file_geneeric_server}
\alias{mod_save_file_geneeric_server}
\title{Generic module server function for saving files for export to Platform}
\usage{
mod_save_file_geneeric_server(
  id,
  FUN,
  args = list(),
  filename,
  extension = "",
  overwrite = TRUE,
  sbg_directory_path = "/sbgenomics"
)
}
\arguments{
\item{id}{Module's ID.}

\item{FUN}{Function for creating a file for saving, i.e `write.table`,
`save`, `write`, `write_json`, `write_xml`, `SaveH5Seurat` etc.}

\item{args}{List of function arguments for the provided FUN.}

\item{filename}{File name.}

\item{extension}{Expected file extension. Please provide expected file
extension in order to properly validate the existence of the file with the
same name and extension.}

\item{overwrite}{Boolean. Overwrite existing file with the same name.}

\item{sbg_directory_path}{Path to the mounted `sbgenomics` directory
containing `project-files`, `output-files` and `workspace` sub-directories
on the instance.
These directories are expected to exist on the instance where the app would
run. For the purposes of testing your app locally, you can create a mock
directory `sbgenomics` with the same structure - containing sub-directories
`project-files`, `output-files` and `workspace` and populate with test files
mimicking the project's file structure on the Platform.}
}
\value{
No value. Use in UI & server of shiny application.
}
\description{
A server side of a shiny Module that allows users to save files
 generated within the Shiny app and export them to the project on the
 Seven Bridges Platform.
}
\examples{
library(shiny)
library(magrittr)
library(sbShinyModules)

# App's  UI
ui <- fluidPage(
  titlePanel("Save plots for export to Platform - Module Demo"),
  sidebarLayout(
    sidebarPanel(
      sliderInput("bins",
        "Number of bins:",
        min = 1,
        max = 50,
        value = 30
      )
    ),
    mainPanel(
      plotOutput("distPlot"),
      fluidRow(
        h3("Export Plot to Platform"),
        br(),
        sbShinyModules::mod_save_plot_to_export_ui(
          id = "plot_exporter"
        )
      )
    )
  )
)

# App's Server Logic
server <- function(input, output, session) {
  # Create reactive values list with plot field
  helper_reactive <- reactiveValues(
    plot = NULL
  )

  plot_output <- eventReactive(input$bins, {
    bins <- input$bins + 1

    # Draw the histogram with the specified number of bins
    faithful[, 2] \%>\%
      hist(
        breaks = seq(min(.),
          max(.),
          length.out = bins
        ),
        col = "darkgray",
        border = "white",
        main = "Geyser eruption duration"
      )
    helper_reactive$plot <- recordPlot()
  })

  output$distPlot <- renderPlot({
    plot_output()
  })

  # Call the plot exporter module
  sbShinyModules::mod_save_plot_to_export_server(
    id = "plot_exporter",
    plot_reactVals = helper_reactive,
    module_title = "Save plot to Platform",
    sbg_directory_path = system.file(
      "tests", "testthat", "sbgenomics_test",
      package = "sbShinyModules"
    ),
    btns_div_width = 12
  )
}

# Run the Shiny app
shinyApp(ui, server)
}
