[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"/articles/file-pickers.html","id":"module-overview","dir":"Articles","previous_headings":"","what":"Module Overview","title":"File Picker Module: Integration and Examples","text":"File Picker Module designed facilitate selection Platform project files . displays table available files, allowing users choose files based different criteria. supports single multiple file selections integrates seamlessly server-side logic Shiny app. leveraging module, can streamline file management tasks, enhance user experience, ensure file selection handled consistently across various parts application.","code":""},{"path":"/articles/file-pickers.html","id":"ui-function","dir":"Articles","previous_headings":"Module Overview","what":"UI Function","title":"File Picker Module: Integration and Examples","text":"module UI function creates action button triggers modal dialog file selection.  UI function also allows customize action button icon (button_icon parameter) width (button_width parameter) suit needs application.","code":""},{"path":"/articles/file-pickers.html","id":"ui-function-call","dir":"Articles","previous_headings":"Module Overview > UI Function","what":"UI Function Call","title":"File Picker Module: Integration and Examples","text":"","code":"mod_file_picker_ui(\"file_picker_1\")"},{"path":"/articles/file-pickers.html","id":"server-function","dir":"Articles","previous_headings":"Module Overview","what":"Server Function","title":"File Picker Module: Integration and Examples","text":"server function handles logic displaying file picker modal managing file selection. provides features table filtering, pagination, selection modes. crucial argument function files_df, data frame developers must prepare provide. data frame include columns file paths relevant metadata. Parameters: id: unique identifier module instance. files_df: data frame containing file information. important argument, must include columns file paths relevant metadata. selection: Specifies selection mode (‘single’ ‘multiple’). Defaults ‘single’. file_identifier_column: column files_df used identify selected files. Defaults path. default_page_size: number rows per page file table. Defaults 10. use_bslib_theme: Choose bslib theme used modal UI. Defaults FALSE. Tip: can use utility function get_all_project_files() fetch project files along metadata Seven Bridges File System (SBFS) expected exist instance app hosted. function returns data frame containing comprehensive file information, making ideal input mod_file_picker_server() function. Check vignette(\"load-files--metadata\") details get_all_project_files() function. Note: Shiny app utilizes bslib theme, ensure use_bslib_theme set TRUE maintain consistent styling across modal dialog.","code":""},{"path":"/articles/file-pickers.html","id":"server-function-call","dir":"Articles","previous_headings":"Module Overview > Server Function","what":"Server Function Call","title":"File Picker Module: Integration and Examples","text":"","code":"mod_file_picker_server(\"file_picker_1\", files_df, selection = \"single\") mod_file_picker_server(\"file_picker_1\", files_df, selection = \"multiple\")"},{"path":"/articles/file-pickers.html","id":"file-picker-modal-dialog","dir":"Articles","previous_headings":"Module Overview","what":"File Picker Modal Dialog","title":"File Picker Module: Integration and Examples","text":"using File Picker Module, need specify information returned selected row(s). done file_identifier_column parameter. default, file_identifier_column set path, typically useful information subsequent steps application. However, can set parameter column files_df data frame contains desired information. crucial specified column, whether path another value, exists files_df data frame provided module. module return reactive expression containing information specified file_identifier_column selected file(s). modal dialog file selection opens, module displays preview table files allows users select files based specified selection mode (‘single’ ‘multiple’). Depending selection mode, table show either radio buttons (single file selection) checkboxes (multiple file selections), enabling users choose one files. , find examples illustrating single-file multi-file picker interfaces.","code":""},{"path":"/articles/file-pickers.html","id":"table-options","dir":"Articles","previous_headings":"Module Overview > File Picker Modal Dialog","what":"Table options","title":"File Picker Module: Integration and Examples","text":"Table columns equipped various filter options depending type data: Numeric Columns: range slider filter allows users narrow table selecting range numeric values.   Numeric column range slider Factor Columns: drop-filter enables users filter table selecting specific factor levels.   Drop-filter Data Types: basic filter case-insensitive text matching available data types.   Case-insensitive text matching filter","code":""},{"path":"/articles/file-pickers.html","id":"example-file-picker-module-in-action","dir":"Articles","previous_headings":"","what":"Example: File Picker Module in Action","title":"File Picker Module: Integration and Examples","text":"following Shiny app demonstrates usage File Picker module. example includes two versions file picker: Single File Picker: Allows users select one file, utilizing radio buttons file selection. Multiple File Picker: Enables users select multiple files using checkboxes. app utilizes built-data frame sbShinyModules package populate files_df parameter file picker module. Note: run example computer, please ensure sbShinyModules package installed.","code":"library(shiny) library(sbShinyModules) # library(bslib) # uncomment if you want to use a Bootstrap theme  # App's  UI ui <- fluidPage(   titlePanel(\"File Picker Module Examples\"),   # theme = bslib::bs_theme(), # uncomment if you want to use a Bootstrap theme   sidebarLayout(     sidebarPanel(       # Single File Picker - UI       fluidRow(         h3(\"Single File Picker\"),         br(),         sbShinyModules::mod_file_picker_ui(\"single_file_picker\"),         br(),         h5(\"Selected File\"),         verbatimTextOutput(\"single_file_picker_selection\", placeholder = TRUE)       ),       hr(),       # Multiple Files Picker - UI       fluidRow(         h3(\"Multiple Files Picker\"),         br(),         sbShinyModules::mod_file_picker_ui(\"multiple_files_picker\"),         br(),         h5(\"Selected Files\"),         verbatimTextOutput(\"mult_files_picker_selection\", placeholder = TRUE)       )     ),     mainPanel(       # Placeholder     )   ) )  # App's Server Logic server <- function(input, output, session) {   # ----------------------------- Load Files ----------------------------------   # Load a built-in data frame for files   files_df <- sbShinyModules::file_picker_example_data    # Remove units (bytes) from size column and make it numeric so that it has   # a range filter   files_df$size <- as.numeric(gsub(\" bytes\", \"\", files_df$size))    # Alternatively, fetch files from a provided directory (path) using the   # get_all_project_files() utility function. Note that this requires the   # xattrs package, which is not available for Windows systems. Therefore,   # this approach will only work on Unix-based systems.    # files_df <- sbShinyModules::get_all_project_files(   #   path = \"/sbgenomics/project-files\"   # )    # ---------------------------------------------------------------------------    ## -------------------- Single File Picker - Server Code --------------------    # Call the file picker module   selected_files_single_picker <- sbShinyModules::mod_file_picker_server(     id = \"single_file_picker\",     files_df = files_df,     # use_bslib_theme = TRUE, # uncomment if you want to use a Bootstrap theme     selection = \"single\",     default_page_size = 5   )    # Display selected files   output$single_file_picker_selection <- renderPrint({     validate(       need(         selected_files_single_picker(),         \"No file has been selected.\"       )     )     cat(selected_files_single_picker(), sep = \"\\n\")   })   # ---------------------------------------------------------------------------      ## ----------------- Multiple Files Picker - Server Code --------------------    # Call the file picker module   selected_files_mult_picker <- sbShinyModules::mod_file_picker_server(     id = \"multiple_files_picker\",     files_df = files_df,     # use_bslib_theme = TRUE, # uncomment if you want to use a Bootstrap theme     selection = \"multiple\",     default_page_size = 5   )    # Display selected files   output$mult_files_picker_selection <- renderPrint({     validate(       need(         selected_files_mult_picker(),         \"No files have been selected.\"       )     )     cat(selected_files_mult_picker(), sep = \"\\n\")   })   # --------------------------------------------------------------------------- }  # Note: To use a Bootstrap theme, ensure you have the 'bslib' package # installed and loaded in your app. # 1. Uncomment `library(bslib)` at the beginning of the script. # 2. Uncomment the `theme = bslib::bs_theme()` line in the UI section. # 3. In the server logic, set `use_bslib_theme = TRUE` in the # `mod_file_picker_server()` function calls.  # Run the Shiny app shinyApp(ui, server)"},{"path":"/articles/generic-file-exporter.html","id":"module-overview","dir":"Articles","previous_headings":"","what":"Module Overview","title":"Generic File Exporter Module: Integration and Examples","text":"Generic File Exporter Module offers flexible versatile solution saving diverse types files within Shiny application. Unlike specialized Plot Exporter Module, focuses specifically plot exporting includes options resizing format selection, module designed handle broad range file types formats, catering diverse file-saving needs.","code":""},{"path":"/articles/generic-file-exporter.html","id":"ui-function","dir":"Articles","previous_headings":"Module Overview","what":"UI Function","title":"Generic File Exporter Module: Integration and Examples","text":"UI function module creates button within Shiny app interface. Clicking button initiates file-saving process. interface minimalistic, providing straightforward means users trigger file-saving operations.","code":""},{"path":"/articles/generic-file-exporter.html","id":"ui-function-call","dir":"Articles","previous_headings":"Module Overview > UI Function","what":"UI Function Call","title":"Generic File Exporter Module: Integration and Examples","text":"","code":"mod_save_file_generic_ui(\"file_exporter_1\")"},{"path":"/articles/generic-file-exporter.html","id":"server-function","dir":"Articles","previous_headings":"Module Overview","what":"Server Function","title":"Generic File Exporter Module: Integration and Examples","text":"server function Generic File Exporter Module responsible executing file-saving logic. user clicks save button, function performs necessary checks executes user-defined file-saving function specified parameters. flexibility module allows define file-saving functions parameters, providing greater control file-saving process. Parameters: id: unique identifier module instance. reac_vals: reactive values list must include following fields: FUN: function used create file (e.g., write.table, save, write_json, write_xml, SaveH5Seurat…). args: list arguments provided function. filename: name file saved. extension: expected file extension proper validation. overwrite: Boolean indicating file name overwritten. sbg_directory_path: Path mounted /sbgenomics directory, contains project-files, output-files, workspace sub-directories. directory structure mirror Platform file system proper integration. developer responsible defining parameters integrating module. can also add additional UI components, file name inputs format selectors, use values populate parameters provided server function. Note: testing locally, can create mock sbgenomics directory required structure. Feedback: Users receive clear alerts regarding success failure file-saving process, ensuring informed issues confirmations.","code":""},{"path":"/articles/generic-file-exporter.html","id":"server-function-call","dir":"Articles","previous_headings":"Module Overview > Server Function","what":"Server Function Call","title":"Generic File Exporter Module: Integration and Examples","text":"","code":"mod_save_file_generic_server(   id = \"file_exporter_1\",   reac_vals = list(     FUN = write.table,     args = list(x = my_data_frame, file = \"my_file.csv\"),     filename = \"my_file\",     extension = \"csv\",     overwrite = TRUE   ),   sbg_directory_path = \"/sbgenomics\" )"},{"path":"/articles/generic-file-exporter.html","id":"example-generic-file-exporter-module-in-action","dir":"Articles","previous_headings":"","what":"Example: Generic File Exporter Module in Action","title":"Generic File Exporter Module: Integration and Examples","text":"following Shiny app demonstrates usage Generic File Exporter module. Note: run example computer, please ensure sbShinyModules package installed.","code":"library(shiny) library(magrittr) library(sbShinyModules) library(reactable) library(jsonlite)   ###### Test modules for demonstrating nested modules ###### test_module_ui <- function(id) {   ns <- NS(id)   tagList(     actionButton(       inputId = ns(\"test_module_btn\"),       label = \"Test nesting modules\",       width = \"100%\"     )   ) }  test_module_server <- function(id) {   moduleServer(id, module = function(input, output, session) {     ns <- session$ns      observeEvent(input$test_module_btn, {       showModal(         ui = modalDialog(           title = \"Test nested modules\",           size = \"l\",           tagList(             reactable::reactableOutput(ns(\"nested_table_data\")),             fluidRow(               column(                 width = 6,                 sbShinyModules::mod_save_file_generic_ui(ns(\"save_file_nested\"))               )             )           ),           footer = tagList(             actionButton(ns(\"dismiss\"),               label = \"Dismiss\",               icon = icon(\"xmark\")             )           )         )       )     })      output$nested_table_data <- reactable::renderReactable({       reactable::reactable(iris,         onClick = \"select\",         filterable = TRUE,         searchable = TRUE,         resizable = TRUE,         defaultPageSize = 10       )     })      # Close modal dialog by clicking the dismiss button     observeEvent(input$dismiss, {       removeModal()     })      # Create reactive values list with mandatory fields to pass to the module     helper_rv_nested <- reactiveValues(       FUN = write.table,       args = list(x = iris, quote = FALSE, row.names = FALSE, col.names = TRUE),       filename = \"generic_file_name\",       extension = \".txt\",       overwrite = TRUE     )     # Call the file exporter module     sbShinyModules::mod_save_file_generic_server(       id = \"save_file_nested\",       reac_vals = helper_rv_nested,       sbg_directory_path = system.file(\"demos/sbgenomics_test\",         package = \"sbShinyModules\"       )     )   }) } ############## Test modules end ###########################  ##### Demo App's  UI ####### ui <- fluidPage(   titlePanel(\"Save data for export to Platform - Module Demo\"),   sidebarLayout(     sidebarPanel(       fluidRow(         h3(\"Export txt/csv to Platform\"),         br(),         textInput(\"file_name\", label = \"Set file name\", width = \"100%\"),         fluidRow(           column(             width = 6,             selectInput(\"separator\",               label = \"Set separator\",               choices = c(\"comma\", \"tab\", \"new line\", \"semicolon\")             )           ),           column(             width = 6,             selectInput(\"extension\",               label = \"Set extension\",               choices = c(\"txt\", \"csv\")             )           )         ),         fluidRow(           column(             width = 6,             radioButtons(\"overwrite\",               label = \"Overwrite existing file?\",               choiceNames = c(\"yes\", \"no\"),               choiceValues = c(\"TRUE\", \"FALSE\")             )           )         ),         fluidRow(           column(             width = 12,             sbShinyModules::mod_save_file_generic_ui(               id = \"file_exporter\",               save_button_title = \"Save txt/csv\"             )           )         )       ),       fluidRow(         h3(\"Export json to Platform\"),         br(),         textInput(\"file_name_json\", label = \"Set file name\", width = \"100%\"),         fluidRow(           column(             width = 12,             sbShinyModules::mod_save_file_generic_ui(               id = \"json_file_exporter\",               save_button_title = \"Save json\"             )           )         )       ),       fluidRow(         h3(\"Export RDS object to Platform\"),         br(),         textInput(\"file_name_rds\", label = \"Set file name\", width = \"100%\"),         fluidRow(           column(             width = 12,             sbShinyModules::mod_save_file_generic_ui(               id = \"rds_file_exporter\",               save_button_title = \"Save RDS\"             )           )         )       ),       fluidRow(         h3(\"Test nested modules\"),         br(),         fluidRow(           column(             width = 12,             test_module_ui(id = \"nested_modules\")           )         )       )     ),     mainPanel(       reactable::reactableOutput(\"table_data\")     )   ) )  ###### Demo App's Server Logic ###### server <- function(input, output, session) {   output$table_data <- reactable::renderReactable({     reactable::reactable(iris,       onClick = \"select\",       filterable = TRUE,       searchable = TRUE,       resizable = TRUE,       defaultPageSize = 10     )   })    # Create reactive values list with mandatory fields to pass to the module   helper_rv_table <- reactiveValues(     FUN = write.table,     args = list(x = iris, quote = FALSE, row.names = FALSE, col.names = TRUE),     filename = NULL,     extension = NULL,     overwrite = FALSE   )    observe(     helper_rv_table$filename <- as.character(input$file_name)   )   observe(     helper_rv_table$args[[\"sep\"]] <- switch(input$separator,       \"comma\" = \",\",       \"tab\" = \"\\t\",       \"new line\" = \"\\n\",       \"semicolon\" = \";\"     )   )   observe(     helper_rv_table$extension <- as.character(input$extension)   )   observe(     helper_rv_table$overwrite <- as.logical(input$overwrite)   )    # Call the file exporter module   sbShinyModules::mod_save_file_generic_server(     id = \"file_exporter\",     reac_vals = helper_rv_table,     sbg_directory_path = system.file(\"demos/sbgenomics_test\",       package = \"sbShinyModules\"     )   )   # Create reactive values list for json file export   helper_rv_json <- reactiveValues(     FUN = write,     args = list(       x = jsonlite::toJSON(x = iris, dataframe = \"rows\", pretty = TRUE)     ),     filename = NULL,     extension = \"json\",     overwrite = TRUE   )    observe(     helper_rv_json$filename <- as.character(input$file_name_json)   )    # Call the file exporter module   sbShinyModules::mod_save_file_generic_server(     id = \"json_file_exporter\",     reac_vals = helper_rv_json,     sbg_directory_path = system.file(\"demos/sbgenomics_test\",       package = \"sbShinyModules\"     )   )   # Create reactive values list for RDS file export   helper_rv_rds <- reactiveValues(     FUN = saveRDS,     args = list(       object = iris     ),     filename = NULL,     extension = \"RDS\",     overwrite = TRUE   )    observe(     helper_rv_rds$filename <- as.character(input$file_name_rds)   )    # Call the file exporter module   sbShinyModules::mod_save_file_generic_server(     id = \"rds_file_exporter\",     reac_vals = helper_rv_rds,     sbg_directory_path = system.file(\"demos/sbgenomics_test\",       package = \"sbShinyModules\"     )   )    # Note: This way the file will be saved in a specific directory within the   # package installation path. To find this default location, you can use the   # following R command to determine the installation path of the   # sbShinyModules package:   #   # find.package(\"sbShinyModules\")   #   # Within this directory, exported files will be placed under:   #   # demos/sbgenomics_test/output-files   #   # You can specify your own destination directory for exported files by   # setting the sbg_directory_path parameter in the   # mod_save_file_generic_server() function. Ensure that the custom directory   # you choose follows the required organizational structure for proper   # functionality. Refer to the sbg_directory_path parameter description in the   # documentation for detailed requirements.    # Call test module   test_module_server(id = \"nested_modules\") }  ###### Run the Shiny app ####### shinyApp(ui, server)"},{"path":"/articles/load-files-and-metadata.html","id":"function-overview","dir":"Articles","previous_headings":"","what":"Function Overview","title":"Utility Function get_all_project_files(): Integration and Examples","text":"function fetches files given directory path recursively, including metadata available. constructs comprehensive data frame containing file names, paths, sizes, associated metadata, making ready use file picker module. Parameters: path: path project-files directory. required parameter specifying location retrieve file information. …: Additional parameters passed list.files() function. Options pattern include.dirs can used customize file search. function returns comprehensive data frame containing file names, paths, sizes, associated metadata (available), making ready use file picker module.","code":""},{"path":"/articles/load-files-and-metadata.html","id":"note-on-dependencies","dir":"Articles","previous_headings":"","what":"Note on Dependencies","title":"Utility Function get_all_project_files(): Integration and Examples","text":"get_all_project_files() function depends xattrs packagefor extended attribute support. package installed automatically *sbShinyModules, need install xattrs separately wish use function. Unix-based systems, can install xattrs using: encounter installation issues, may due missing system libraries. instance, Ubuntu Linux, can resolve installing libattr1-dev library : macOS users, additional system libraries typically required xattrs, ensure system --date. Please note get_all_project_files() function available Windows systems. depends xattrs package, requires extended attribute functions supported Windows.","code":"remotes::install_github(\"hrbrmstr/xattrs\") sudo apt-get update sudo apt-get install libattr1-dev"},{"path":"/articles/load-files-and-metadata.html","id":"integration-with-file-picker-module","dir":"Articles","previous_headings":"","what":"Integration with File Picker Module","title":"Utility Function get_all_project_files(): Integration and Examples","text":"utility function loading project files metadata get_all_project_files() intended used developing Shiny apps within Data Studio, deployed -demand Shiny apps using Data Studio infrastructure. Data Studio environments (RStudio Jupyter) come equipped Seven Bridges File System (SBFS) tool installed, allowing access project files right IDE/Data Studio. means project files mounted local file system can imported analysis without download upload. mounted directory called sbgenomics contains subdirectories: - project-files - output-files - workspace /project-files subdirectory contains project files (project started application). However, /output-files subdirectory aims “save” files wish write/export analysis/application project; therefore, “write” permissions . files store exported project files stop analysis/application. /workspace subdirectory can serve working directory can store temporary files produced app execution, want export. content subdirectory saved available next time app initialized, strongly suggest storing anything .  data frame produced get_all_project_files() can directly used input files_df parameter file picker module (check vignette(\"file-pickers\") details). streamlines process populating file picker accurate --date file information. utilizing get_all_project_files() function, can efficiently gather prepare file information, enhancing functionality Shiny applications involve file management selection. Note: run example, ensure sbShinyModules xattrs packages installed. Please aware work Windows systems.","code":"# Create a mock directory on the sbgenomics/project-files path and populate it # with some test fles to test the get_all_project_files() function all_files_df <- sbShinyModules::get_all_project_files(   path = \"/sbgenomics/project-files\" )  head(all_files_df)"},{"path":"/articles/plot-exporter.html","id":"module-overview","dir":"Articles","previous_headings":"","what":"Module Overview","title":"Plot Exporter Module: Integration and Examples","text":"Plot Exporter Module enables users save export plots generated within Shiny app Seven Bridges Platform. module provides user-friendly interface exporting plots various formats integrates seamlessly server-side logic Shiny app.","code":""},{"path":"/articles/plot-exporter.html","id":"ui-function","dir":"Articles","previous_headings":"Module Overview","what":"UI Function","title":"Plot Exporter Module: Integration and Examples","text":"UI function Plot Exporter Module creates action button triggers modal dialog exporting plots. modal dialog includes settings selecting output formats managing export options. Parameters: id: unique identifier module instance. save_button_title: label button triggers export modal.","code":""},{"path":"/articles/plot-exporter.html","id":"ui-function-call","dir":"Articles","previous_headings":"Module Overview > UI Function","what":"UI Function Call","title":"Plot Exporter Module: Integration and Examples","text":"","code":"mod_plot_exporter_ui(\"plot_exporter_1\", save_button_title = \"Save Plot\")"},{"path":"/articles/plot-exporter.html","id":"server-function","dir":"Articles","previous_headings":"Module Overview","what":"Server Function","title":"Plot Exporter Module: Integration and Examples","text":"server function handles logic exporting plots. integrates reactiveValues manage plot object provides settings output formats directory paths. function crucial enabling users export plots various formats save Seven Bridges Platform. Parameters: id: Module’s ID. plot_reactVals: reactiveValues object containing plot slot plot object created using recordPlot(). plot exported. output_formats: supported output formats exporting plot. Options include “png”, “pdf”, “svg”, “jpeg”, “bmp”, “tiff”. module_title: title displayed modal dialog top-left corner. sbg_directory_path: Path mounted /sbgenomics directory, include project-files, output-files, workspace sub-directories. directory structure must exist instance app runs. local testing, create mock directory structure populate test files. btns_div_width: Width div() containing buttons saving plots modal dialog. Default 12.","code":""},{"path":"/articles/plot-exporter.html","id":"server-function-call","dir":"Articles","previous_headings":"Module Overview > Server Function","what":"Server Function Call","title":"Plot Exporter Module: Integration and Examples","text":"Note: developing Shiny application hosted -demand Seven Bridges Platform, sbg_directory_path parameter set default value /sbgenomics. path points /sbgenomics directory, already includes project-files, output-files, workspace sub-directories. local testing application, can create mock sbgenomics directory structure—containing project-files, output-files, workspace sub-directories. Populate mock directory test files replicate project file structure Platform.","code":"mod_plot_exporter_server(   id = \"plot_exporter_1\",   plot_reactVals = helper_reactive,   output_formats = c(\"png\", \"pdf\"),   module_title = \"Export Plot\",   sbg_directory_path = \"/sbgenomics\",   btns_div_width = 12 )"},{"path":"/articles/plot-exporter.html","id":"plot-exporter-module-modal-dialog-features","dir":"Articles","previous_headings":"Module Overview","what":"Plot Exporter Module: Modal Dialog Features","title":"Plot Exporter Module: Integration and Examples","text":"users click Save Plot button, modal dialog appears, offering several advanced features customizing exporting plot. modal dialog provides two options resizing plot saving:","code":""},{"path":"/articles/plot-exporter.html","id":"plot-resizing","dir":"Articles","previous_headings":"Module Overview > Plot Exporter Module: Modal Dialog Features","what":"Plot Resizing","title":"Plot Exporter Module: Integration and Examples","text":"modal dialog provides two options resizing plot saving: Interactive Resizing: Users can drag resize plot box using cursor. functionality leverages React Moveable library, allowing users adjust plot dimensions directly. users resize box, plot within automatically adjusts fit new size, modal dialog resizes accordingly accommodate updated plot dimensions. Manual Resizing: Users can also specify plot width height manually. entering desired dimensions clicking “Update Preview” button, plot modal dialog adjust reflect new size. option provides precise control plot appearance.","code":""},{"path":"/articles/plot-exporter.html","id":"file-naming-and-valdation","dir":"Articles","previous_headings":"Module Overview > Plot Exporter Module: Modal Dialog Features","what":"File Naming and Valdation","title":"Plot Exporter Module: Integration and Examples","text":"modal dialog includes text input element users can set name (base name) plot file. Key aspects feature include: File Name Validation: module performs real-time validation check file name (base name + extension) already exists project directory previously saved within session (stored output-files). conflict detected, warning message displayed near text input field, prompting users choose different name.  Overwrite Option: cases users prefer overwrite existing file, overwrite switch available. option allows users save plot name, regardless existing files project directory.","code":""},{"path":"/articles/plot-exporter.html","id":"file-format-selection","dir":"Articles","previous_headings":"Module Overview > Plot Exporter Module: Modal Dialog Features","what":"File Format Selection","title":"Plot Exporter Module: Integration and Examples","text":"bottom modal dialog, users can choose various file formats exporting plot. section includes: Format Buttons: dialog features buttons default file formats: PNG, PDF, SVG, JPEG, BMP, TIFF. specific formats available controlled output_formats parameter mod_plot_exporter_server() function. default, six formats shown, can limit options subset formats.  Saving Plot: Clicking format button triggers plot export process, using specified base name selected file extension. action also invokes file name validation mechanism described , ensuring users alerted potential conflicts saving. Please Note: default, plot files saved /sbgenomics/output-files directory. Shiny app stopped, files accessible “Files” tab project app launched.","code":""},{"path":"/articles/plot-exporter.html","id":"example-file-picker-module-in-action","dir":"Articles","previous_headings":"","what":"Example: File Picker Module in Action","title":"Plot Exporter Module: Integration and Examples","text":"following Shiny app demonstrates usage Plot Exporter module. Keep mind UI function creates button triggering export, server function handles export settings file saving. Note: run example computer, please ensure sbShinyModules package installed.","code":"library(shiny) library(magrittr) library(sbShinyModules)  # App's  UI ui <- fluidPage(   titlePanel(\"Save plots for export to Platform - Module Demo\"),   sidebarLayout(     sidebarPanel(       sliderInput(\"bins\",         \"Number of bins:\",         min = 1,         max = 50,         value = 30       )     ),     mainPanel(       plotOutput(\"distPlot\"),       fluidRow(         h3(\"Export Plot to Platform\"),         br(),         sbShinyModules::mod_save_plot_to_export_ui(           id = \"plot_exporter\"         )       )     )   ) )  # App's Server Logic server <- function(input, output, session) {   # Create reactive values list with plot field   helper_reactive <- reactiveValues(     plot = NULL   )    plot_output <- eventReactive(input$bins, {     bins <- input$bins + 1      # Draw the histogram with the specified number of bins     faithful[, 2] %>%       hist(         breaks = seq(min(.),           max(.),           length.out = bins         ),         col = \"darkgray\",         border = \"white\",         main = \"Geyser eruption duration\"       )     helper_reactive$plot <- recordPlot()   })    output$distPlot <- renderPlot({     plot_output()   })    # Call the plot exporter module   sbShinyModules::mod_save_plot_to_export_server(     id = \"plot_exporter\",     plot_reactVals = helper_reactive,     module_title = \"Save plot to Platform\",     sbg_directory_path = system.file(\"demos/sbgenomics_test\",       package = \"sbShinyModules\"     ),     btns_div_width = 12   )    # Note: This way the plot will be saved in a specific directory within the   # package installation path. To find this default location, you can use the   # following R command to determine the installation path of the   # sbShinyModules package:   #   # find.package(\"sbShinyModules\")   #   # Within this directory, exported files will be placed under:   #   # demos/sbgenomics_test/output-files   #   # You can specify your own destination directory for exported files by   # setting the sbg_directory_path parameter in the   # mod_save_plot_to_export_server() function. Ensure that the custom directory   # you choose follows the required organizational structure for proper   # functionality. Refer to the sbg_directory_path parameter description in the   # documentation for detailed requirements. }  # Run the Shiny app shinyApp(ui, server)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marko Trifunovic. Maintainer, author. Marija Gacic. Author. Velsera. Copyright holder, funder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Trifunovic M, Gacic M (2024). sbShinyModules: Reusable Shiny Modules Easy Integration Seven Bridges Platforms. R package version 0.0.0.9000.","code":"@Manual{,   title = {sbShinyModules: Reusable Shiny Modules for Easy Integration on Seven Bridges Platforms},   author = {Marko Trifunovic and Marija Gacic},   year = {2024},   note = {R package version 0.0.0.9000}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Reusable Shiny Modules for Easy Integration on Seven Bridges Platforms","text":"sbShinyModules R package designed simplify development Shiny applications specifically hosting -demand Shiny applications Seven Bridges Platforms. package aims assist internal external developers providing pre-built, reusable Shiny modules tailored fit Seven Bridges hosting infrastructure. using modules, developers can focus unique aspects applications without needing research implement common functionalities . Modules file pickers file exporters designed work seamlessly within -demand Data Studio hosting solution, allowing easy integration. detailed guideline integrating modules Shiny apps publishing Seven Bridges Platform can found .","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Reusable Shiny Modules for Easy Integration on Seven Bridges Platforms","text":"Install development version GitHub using remotes package:","code":"# Install the remotes package if you haven't already # install.packages(\"remotes\")  # Install sbShinyModules from GitHub remotes::install_github(\"sbg/sbShinyModules@develop\")"},{"path":"/index.html","id":"note-on-dependencies","dir":"","previous_headings":"","what":"Note on Dependencies","title":"Reusable Shiny Modules for Easy Integration on Seven Bridges Platforms","text":"sbShinyModules package core set functionalities available default upon installation. However, get_all_project_files() function requires xattrs package extended attribute support. Unix-based Systems (Linux, macOS): xattrs Package: use get_all_project_files() function, need install xattrs package. Unix-based systems, can install : System Dependencies: Unix-based systems, additional system libraries might required. example, Ubuntu Linux, need libattr1-dev library. Install using: macOS users, additional system libraries typically required xattrs, ensure system --date. Windows Users: get_all_project_files() function available Windows systems depends xattrs package, requires extended attribute functions supported Windows. default, modules functions sbShinyModules package available without xattrs package. Note: Data Studio RStudio environments Seven Bridges Platforms based Ubuntu, Unix-based system. facilitate installation xattrs package, might still need install libattr1-dev library xattrs package can successfully installed.","code":"remotes::install_github(\"hrbrmstr/xattrs\") sudo apt-get update sudo apt-get install libattr1-dev"},{"path":[]},{"path":"/index.html","id":"file-picker-module","dir":"","previous_headings":"Features","what":"File Picker Module","title":"Reusable Shiny Modules for Easy Integration on Seven Bridges Platforms","text":"File Picker Module enables users select files Platform projects within Shiny app. supports single multiple file selections user-friendly interface.","code":"# UI part mod_file_picker_ui(\"file_picker_1\") # Server part mod_file_picker_server(\"file_picker_1\", files_df, selection = \"single\")"},{"path":"/index.html","id":"plot-exporter-module","dir":"","previous_headings":"Features","what":"Plot Exporter Module","title":"Reusable Shiny Modules for Easy Integration on Seven Bridges Platforms","text":"Plot Exporter Module allows users save export plots generated within Shiny app. supports various output formats integrates Seven Bridges Platform seamless project file management.","code":"# UI part mod_plot_exporter_ui(\"plot_exporter_1\", save_button_title = \"Save Plot\") # Server part mod_plot_exporter_server(    id = \"plot_exporter_1\",    plot_reactVals = helper_reactive,    output_formats = c(\"png\", \"pdf\"),    module_title = \"Export Plot\",    sbg_directory_path = \"/sbgenomics\",    btns_div_width = 12  )"},{"path":"/index.html","id":"generic-file-exporter-module","dir":"","previous_headings":"Features","what":"Generic File Exporter Module","title":"Reusable Shiny Modules for Easy Integration on Seven Bridges Platforms","text":"Generic File Exporter Module provides flexible solution saving exporting variety file types Shiny app Platform project. supports different file formats export functions.","code":"# UI part mod_save_file_generic_ui(\"file_exporter_1\") # Server part mod_save_file_generic_server(   id = \"file_exporter_1\",     reac_vals = list(      FUN = write.table,      args = list(x = my_data_frame, file = \"my_file.csv\"),      filename = \"my_file\",      extension = \"csv\",      overwrite = TRUE    ),      sbg_directory_path = \"/sbgenomics\")"},{"path":"/index.html","id":"get_all_project_files-function","dir":"","previous_headings":"Features","what":"get_all_project_files() Function","title":"Reusable Shiny Modules for Easy Integration on Seven Bridges Platforms","text":"utility function simplifies file management efficiently retrieving detailed information files within specified directory.  Important Note! Platform Compatibility: get_all_project_files() function supported exclusively Unix-based systems (e.g., Linux, macOS) available Windows. Dependencies: xattrs R package required using function. Please ensure package installed full functionality enabled.","code":"# Create a mock directory on the sbgenomics/project-files path and populate it # with some test fles to test the get_all_project_files() function all_files_df <- sbShinyModules::get_all_project_files(   path = \"/sbgenomics/project-files\" )  head(all_files_df)"},{"path":"/reference/file_picker_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data frame to be used with in the file_pickers_demo_app.R — file_picker_example_data","title":"Example data frame to be used with in the file_pickers_demo_app.R — file_picker_example_data","text":"Example data frame used file_pickers_demo_app.R","code":""},{"path":"/reference/file_picker_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data frame to be used with in the file_pickers_demo_app.R — file_picker_example_data","text":"","code":"file_picker_example_data"},{"path":"/reference/file_picker_example_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data frame to be used with in the file_pickers_demo_app.R — file_picker_example_data","text":"## `file_picker_example_data` data frame 8 rows 24 columns: name File name. id File ID. extension File extension. size File size bytes. sample_id human readable identifier sample specimen,    can contain metadata information. tags Platform tags attached file. origin_task_id id Platform task generated file. path Absolute path file. parent_id ID parent directory. experimental_strategy method protocol used perform    laboratory analysis. library_id identifier sequencing library preparation. platform version (manufacturer, model, etc.) technology    used sequencing assaying. platform_unit_id identifier lanes (Illumina), slides    (SOLiD) case library split ran multiple lanes     flow cell slides. platform unit ID refers lane ID     slide ID. file_segment_number sequencing reads single library,    sample lane divided multiple (smaller) files, File    segment number used enumerate . Otherwise, field can    left blank. quality_scale raw reads, value denotes sequencing    technology quality format.BAM SAM files, value    always ‘Sanger’. paired_end paired-end sequencing, value determines end    sequenced fragment. single-end sequencing value needed. reference_genome reference assembly (HG19 GRCh37)   nucleotide sequence case can aligned. investigation value denoting project study generated    data. species group organisms common characteristic    qualities, differ groups organisms    capable breeding producing fertile offspring. batch_number Assigned distinctive identification code    signifies grouping. case_id human-readable identifier, number string    subject taken part investigation study. sample_type type material taken biological entity    testing, diagnosis, propagation, treatment, research purposes.    includes tissues, body fluids, cells, organs, embryos, body excretory    products, etc. md5_sum 32-character hexadecimal number computed    file. sbg_public_files_category SBG Platform public files category.","code":""},{"path":"/reference/get_all_project_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all project files — get_all_project_files","title":"Get all project files — get_all_project_files","text":"Utility function fetching project files Seven Bridges File  system within Data Studio accompanied associated metadata available.  expected output data.frame containing available  information files, ready used displayed within file  pickers. **Note:** `xattrs` package required extended attribute support,  includes retrieving additional metadata. package works  Unix-based operating systems (e.g., Linux, macOS) installed  used Windows systems due lack support extended  attributes functions Windows. Therefore, `get_all_project_files()`  function work Windows systems. Unix-based systems, please  install `xattrs` package utilize function.","code":""},{"path":"/reference/get_all_project_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all project files — get_all_project_files","text":"","code":"get_all_project_files(path, ...)"},{"path":"/reference/get_all_project_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all project files — get_all_project_files","text":"path Project files directory path. ... Additional parameters can passed `list.files()` function function relying , like `pattern`, `include.dirs` etc. See details `?list.files`.","code":""},{"path":"/reference/get_all_project_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all project files — get_all_project_files","text":"Data.frame containing project files names, paths,  sizes associated metadata fields available.","code":""},{"path":"/reference/mod_file_picker_server.html","id":null,"dir":"Reference","previous_headings":"","what":"file_picker Server Functions — mod_file_picker_server","title":"file_picker Server Functions — mod_file_picker_server","text":"Server function Shiny module selecting either single  file multiple files used within app. module displays  modal dialog preview table files allows users select files  based specified `selection` mode ('single' 'multiple'). table  columns filterable, different types filters available  depending type data column: numeric columns: range slider filter allows users filter     table selecting range values. factor columns: drop-filter allows users filter     table selecting specific factor levels. data types: basic filter using case-insensitive text      match available.","code":""},{"path":"/reference/mod_file_picker_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"file_picker Server Functions — mod_file_picker_server","text":"","code":"mod_file_picker_server(   id,   files_df,   selection = \"single\",   file_identifier_column = \"path\",   default_page_size = 10,   use_bslib_theme = FALSE,   ... )"},{"path":"/reference/mod_file_picker_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"file_picker Server Functions — mod_file_picker_server","text":"id unique identifier module instance. files_df data frame containing file information. data frame column file paths relevant metadata. can use get_all_project_files function fetch project files along metadata SB File system within Data Studio.function returns data frame containing comprehensive file information, making ideal input `mod_file_picker_server()` function. selection string specifying selection mode. Can either 'single' single file selection 'multiple' multiple file  selection. default value 'single'. file_identifier_column string specifying column name `files_df` values selected files returned.  Defaults `path`. default_page_size Number rows per page display table. Defaults 10. use_bslib_theme logical value indicating modal's UI generated using bslib package. FALSE (default), regular UI generated. TRUE, UI generated using bslib package functions. Note use option, main UI app must include line theme = bslib::bs_theme(). requirement ensures correct  application bslib theme throughout app. ... Additional parameters passed `reactable()` function module relies .","code":""},{"path":"/reference/mod_file_picker_server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"file_picker Server Functions — mod_file_picker_server","text":"reactive expression containing information selected  files based specified `file_identifier_column`.","code":""},{"path":"/reference/mod_file_picker_server.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"file_picker Server Functions — mod_file_picker_server","text":"incorporate module Shiny app, need include  UI server functions appropriate places app  code: **UI Function**: Add `mod_file_picker_ui(\"file_picker_1\")`     UI part Shiny app want action button appear. **Server Function**: Add `mod_file_picker_server(\"file_picker_1\", files_df)`     server part Shiny app. Make sure replace `files_df`     actual data frame contains file information.","code":""},{"path":[]},{"path":"/reference/mod_file_picker_server.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"file_picker Server Functions — mod_file_picker_server","text":"","code":"library(shiny) library(sbShinyModules) # library(bslib) # uncomment if you want to use a Bootstrap theme  # App's  UI ui <- fluidPage(   titlePanel(\"File Picker Module Examples\"),   # theme = bslib::bs_theme(), # uncomment if you want to use a Bootstrap theme   sidebarLayout(     sidebarPanel(       # Single File Picker - UI       fluidRow(         h3(\"Single File Picker\"),         br(),         sbShinyModules::mod_file_picker_ui(\"single_file_picker\"),         br(),         h5(\"Selected File\"),         verbatimTextOutput(\"single_file_picker_selection\", placeholder = TRUE)       ),       hr(),       # Multiple Files Picker - UI       fluidRow(         h3(\"Multiple Files Picker\"),         br(),         sbShinyModules::mod_file_picker_ui(\"multiple_files_picker\"),         br(),         h5(\"Selected Files\"),         verbatimTextOutput(\"mult_files_picker_selection\", placeholder = TRUE)       )     ),     mainPanel(       # Placeholder     )   ) )  # App Server Logic server <- function(input, output, session) {   # ----------------------------- Load Files ----------------------------------   # Load a built-in data frame for files   files_df <- sbShinyModules::file_picker_example_data    # Remove units (bytes) from the size column and make it numeric so that it has   # a range filter   files_df$size <- as.numeric(gsub(\" bytes\", \"\", files_df$size))    # Alternatively, fetch files from a provided directory (path) using the   # get_all_project_files() utility function. Note that this requires the   # xattrs package, which is not available for Windows systems. Therefore,   # this approach will only work on Unix-based systems.    # files_df <- sbShinyModules::get_all_project_files(   #   path = \"/sbgenomics/project-files\"   # )    # ---------------------------------------------------------------------------    ## -------------------- Single File Picker - Server Code --------------------    # Call the file picker module   selected_files_single_picker <- sbShinyModules::mod_file_picker_server(     id = \"single_file_picker\",     files_df = files_df,     # use_bslib_theme = TRUE, # uncomment if you want to use a Bootstrap theme     selection = \"single\",     default_page_size = 5   )    # Display selected files   output$single_file_picker_selection <- renderPrint({     validate(       need(         selected_files_single_picker(),         \"No file has been selected.\"       )     )     cat(selected_files_single_picker(), sep = \"\\n\")   })   # ---------------------------------------------------------------------------      ## ----------------- Multiple Files Picker - Server Code --------------------    # Call the file picker module   selected_files_mult_picker <- sbShinyModules::mod_file_picker_server(     id = \"multiple_files_picker\",     files_df = files_df,     # use_bslib_theme = TRUE, # uncomment if you want to use a Bootstrap theme     selection = \"multiple\",     default_page_size = 5   )    # Display selected files   output$mult_files_picker_selection <- renderPrint({     validate(       need(         selected_files_mult_picker(),         \"No files have been selected.\"       )     )     cat(selected_files_mult_picker(), sep = \"\\n\")   })   # --------------------------------------------------------------------------- }  # Note: To use a Bootstrap theme, ensure you have the 'bslib' package # installed and loaded in your app. # 1. Uncomment `library(bslib)` at the beginning of the script. # 2. Uncomment the `theme = bslib::bs_theme()` line in the UI section. # 3. In the server logic, set `use_bslib_theme = TRUE` in the # `mod_file_picker_server()` function calls.  # Run the Shiny app shinyApp(ui, server)"},{"path":"/reference/mod_file_picker_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"file_picker UI Function — mod_file_picker_ui","title":"file_picker UI Function — mod_file_picker_ui","text":"UI function file picker Shiny module. adds  action button triggers file picker modal. module allows  users select either single file multiple files used within  app. UI function placed UI part Shiny app  file picker button required.","code":""},{"path":"/reference/mod_file_picker_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"file_picker UI Function — mod_file_picker_ui","text":"","code":"mod_file_picker_ui(   id,   button_icon = icon(\"circle-plus\"),   button_width = \"100%\" )"},{"path":"/reference/mod_file_picker_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"file_picker UI Function — mod_file_picker_ui","text":"id Module ID. button_icon optional icon appear button. Defaults `icon('circle-plus')`. button_width width button. Defaults `100%`.","code":""},{"path":"/reference/mod_file_picker_ui.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"file_picker UI Function — mod_file_picker_ui","text":"incorporate module Shiny app, need include  UI server functions appropriate places app  code: **UI Function**: Add `mod_file_picker_ui(\"file_picker_1\")`     UI part Shiny app want action button appear. **Server Function**: Add `mod_file_picker_server(\"file_picker_1\", files_df)`     server part Shiny app. Make sure replace `files_df`     actual data frame contains file information.","code":""},{"path":[]},{"path":"/reference/mod_file_picker_ui.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"file_picker UI Function — mod_file_picker_ui","text":"","code":"library(shiny) library(sbShinyModules) # library(bslib) # uncomment if you want to use a Bootstrap theme  # App's  UI ui <- fluidPage(   titlePanel(\"File Picker Module Examples\"),   # theme = bslib::bs_theme(), # uncomment if you want to use a Bootstrap theme   sidebarLayout(     sidebarPanel(       # Single File Picker - UI       fluidRow(         h3(\"Single File Picker\"),         br(),         sbShinyModules::mod_file_picker_ui(\"single_file_picker\"),         br(),         h5(\"Selected File\"),         verbatimTextOutput(\"single_file_picker_selection\", placeholder = TRUE)       ),       hr(),       # Multiple Files Picker - UI       fluidRow(         h3(\"Multiple Files Picker\"),         br(),         sbShinyModules::mod_file_picker_ui(\"multiple_files_picker\"),         br(),         h5(\"Selected Files\"),         verbatimTextOutput(\"mult_files_picker_selection\", placeholder = TRUE)       )     ),     mainPanel(       # Placeholder     )   ) )  # App Server Logic server <- function(input, output, session) {   # ----------------------------- Load Files ----------------------------------   # Load a built-in data frame for files   files_df <- sbShinyModules::file_picker_example_data    # Remove units (bytes) from the size column and make it numeric so that it has   # a range filter   files_df$size <- as.numeric(gsub(\" bytes\", \"\", files_df$size))    # Alternatively, fetch files from a provided directory (path) using the   # get_all_project_files() utility function. Note that this requires the   # xattrs package, which is not available for Windows systems. Therefore,   # this approach will only work on Unix-based systems.    # files_df <- sbShinyModules::get_all_project_files(   #   path = \"/sbgenomics/project-files\"   # )    # ---------------------------------------------------------------------------    ## -------------------- Single File Picker - Server Code --------------------    # Call the file picker module   selected_files_single_picker <- sbShinyModules::mod_file_picker_server(     id = \"single_file_picker\",     files_df = files_df,     # use_bslib_theme = TRUE, # uncomment if you want to use a Bootstrap theme     selection = \"single\",     default_page_size = 5   )    # Display selected files   output$single_file_picker_selection <- renderPrint({     validate(       need(         selected_files_single_picker(),         \"No file has been selected.\"       )     )     cat(selected_files_single_picker(), sep = \"\\n\")   })   # ---------------------------------------------------------------------------      ## ----------------- Multiple Files Picker - Server Code --------------------    # Call the file picker module   selected_files_mult_picker <- sbShinyModules::mod_file_picker_server(     id = \"multiple_files_picker\",     files_df = files_df,     # use_bslib_theme = TRUE, # uncomment if you want to use a Bootstrap theme     selection = \"multiple\",     default_page_size = 5   )    # Display selected files   output$mult_files_picker_selection <- renderPrint({     validate(       need(         selected_files_mult_picker(),         \"No files have been selected.\"       )     )     cat(selected_files_mult_picker(), sep = \"\\n\")   })   # --------------------------------------------------------------------------- }  # Note: To use a Bootstrap theme, ensure you have the 'bslib' package # installed and loaded in your app. # 1. Uncomment `library(bslib)` at the beginning of the script. # 2. Uncomment the `theme = bslib::bs_theme()` line in the UI section. # 3. In the server logic, set `use_bslib_theme = TRUE` in the # `mod_file_picker_server()` function calls.  # Run the Shiny app shinyApp(ui, server)"},{"path":"/reference/mod_save_file_generic_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic module server function for saving files that are exported to the Platform — mod_save_file_generic_server","title":"Generic module server function for saving files that are exported to the Platform — mod_save_file_generic_server","text":"Server side shiny Module allows users save files  generated within Shiny app export project  Seven Bridges Platform.","code":""},{"path":"/reference/mod_save_file_generic_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic module server function for saving files that are exported to the Platform — mod_save_file_generic_server","text":"","code":"mod_save_file_generic_server(id, reac_vals, sbg_directory_path = \"/sbgenomics\")"},{"path":"/reference/mod_save_file_generic_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic module server function for saving files that are exported to the Platform — mod_save_file_generic_server","text":"id Module's ID. reac_vals Reactive values list containing mandatory fields: `FUN`- Function creating file, .e `write.table`,     `save`, `write`, `write_json`, `write_xml`, `SaveH5Seurat` etc. `args`- List function arguments provided FUN. `filename`- File name. `extension`- expected file extension. Please provide expected     file extension available, order properly validate existence     file name extension. `overwrite`- Boolean. Overwrite existing file name. sbg_directory_path Path mounted `sbgenomics` directory containing `project-files`, `output-files` `workspace` sub-directories instance. directories expected exist instance app run. purpose testing app locally, can create mock directory `sbgenomics` structure - containing sub-directories `project-files`, `output-files` `workspace` populate test files mimicking project file structure Platform.","code":""},{"path":"/reference/mod_save_file_generic_server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic module server function for saving files that are exported to the Platform — mod_save_file_generic_server","text":"value. Use UI & server shiny application.","code":""},{"path":"/reference/mod_save_file_generic_server.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic module server function for saving files that are exported to the Platform — mod_save_file_generic_server","text":"","code":"library(shiny) library(magrittr) library(sbShinyModules) library(reactable) library(jsonlite)   ###### Test modules for demonstrating nested modules ###### test_module_ui <- function(id) {   ns <- NS(id)   tagList(     actionButton(       inputId = ns(\"test_module_btn\"),       label = \"Test nesting modules\",       width = \"100%\"     )   ) }  test_module_server <- function(id) {   moduleServer(id, module = function(input, output, session) {     ns <- session$ns      observeEvent(input$test_module_btn, {       showModal(         ui = modalDialog(           title = \"Test nested modules\",           size = \"l\",           tagList(             reactable::reactableOutput(ns(\"nested_table_data\")),             fluidRow(               column(                 width = 6,                 sbShinyModules::mod_save_file_generic_ui(ns(\"save_file_nested\"))               )             )           ),           footer = tagList(             actionButton(ns(\"dismiss\"),               label = \"Dismiss\",               icon = icon(\"xmark\")             )           )         )       )     })      output$nested_table_data <- reactable::renderReactable({       reactable::reactable(iris,         onClick = \"select\",         filterable = TRUE,         searchable = TRUE,         resizable = TRUE,         defaultPageSize = 10       )     })      # Close the modal dialog by clicking the dismiss button     observeEvent(input$dismiss, {       removeModal()     })      # Create the reactive values list with mandatory fields to pass to the     # module     helper_rv_nested <- reactiveValues(       FUN = write.table,       args = list(x = iris, quote = FALSE, row.names = FALSE, col.names = TRUE),       filename = \"generic_file_name\",       extension = \".txt\",       overwrite = TRUE     )     # Call the file exporter module     sbShinyModules::mod_save_file_generic_server(       id = \"save_file_nested\",       reac_vals = helper_rv_nested,       sbg_directory_path = system.file(         \"tests\", \"testthat\", \"sbgenomics_test\",         package = \"sbShinyModules\"       )     )   }) } ############## Test modules end ###########################  ##### Demo App  UI ####### ui <- fluidPage(   titlePanel(\"Save data for the export to the Platform - Module Demo\"),   sidebarLayout(     sidebarPanel(       fluidRow(         h3(\"Export txt/csv to the Platform\"),         br(),         textInput(\"file_name\", label = \"Set file name\", width = \"100%\"),         fluidRow(           column(             width = 6,             selectInput(\"separator\",               label = \"Set separator\",               choices = c(\"comma\", \"tab\", \"new line\", \"semicolon\")             )           ),           column(             width = 6,             selectInput(\"extension\",               label = \"Set extension\",               choices = c(\"txt\", \"csv\")             )           )         ),         fluidRow(           column(             width = 6,             radioButtons(\"overwrite\",               label = \"Overwrite existing file?\",               choiceNames = c(\"yes\", \"no\"),               choiceValues = c(\"TRUE\", \"FALSE\")             )           )         ),         fluidRow(           column(             width = 12,             sbShinyModules::mod_save_file_generic_ui(               id = \"file_exporter\",               save_button_title = \"Save txt/csv\"             )           )         )       ),       fluidRow(         h3(\"Export json to the Platform\"),         br(),         textInput(\"file_name_json\", label = \"Set file name\", width = \"100%\"),         fluidRow(           column(             width = 12,             sbShinyModules::mod_save_file_generic_ui(               id = \"json_file_exporter\",               save_button_title = \"Save json\"             )           )         )       ),       fluidRow(         h3(\"Export RDS object to the Platform\"),         br(),         textInput(\"file_name_rds\", label = \"Set file name\", width = \"100%\"),         fluidRow(           column(             width = 12,             sbShinyModules::mod_save_file_generic_ui(               id = \"rds_file_exporter\",               save_button_title = \"Save RDS\"             )           )         )       ),       fluidRow(         h3(\"Test nested modules\"),         br(),         fluidRow(           column(             width = 12,             test_module_ui(id = \"nested_modules\")           )         )       )     ),     mainPanel(       reactable::reactableOutput(\"table_data\")     )   ) )  ###### Demo App Server Logic ###### server <- function(input, output, session) {   output$table_data <- reactable::renderReactable({     reactable::reactable(iris,       onClick = \"select\",       filterable = TRUE,       searchable = TRUE,       resizable = TRUE,       defaultPageSize = 10     )   })    # Create the reactive values list with mandatory fields to pass to the module   helper_rv_table <- reactiveValues(     FUN = write.table,     args = list(x = iris, quote = FALSE, row.names = FALSE, col.names = TRUE),     filename = NULL,     extension = NULL,     overwrite = FALSE   )    observe(     helper_rv_table$filename <- as.character(input$file_name)   )   observe(     helper_rv_table$args[[\"sep\"]] <- switch(input$separator,       \"comma\" = \",\",       \"tab\" = \"\\t\",       \"new line\" = \"\\n\",       \"semicolon\" = \";\"     )   )   observe(     helper_rv_table$extension <- as.character(input$extension)   )   observe(     helper_rv_table$overwrite <- as.logical(input$overwrite)   )    # Call the file exporter module   sbShinyModules::mod_save_file_generic_server(     id = \"file_exporter\",     reac_vals = helper_rv_table,     sbg_directory_path = system.file(       \"tests\", \"testthat\", \"sbgenomics_test\",       package = \"sbShinyModules\"     )   )   # Create reactive values list for the json file export   helper_rv_json <- reactiveValues(     FUN = write,     args = list(       x = jsonlite::toJSON(x = iris, dataframe = \"rows\", pretty = TRUE)     ),     filename = NULL,     extension = \"json\",     overwrite = TRUE   )    observe(     helper_rv_json$filename <- as.character(input$file_name_json)   )    # Call the file exporter module   sbShinyModules::mod_save_file_generic_server(     id = \"json_file_exporter\",     reac_vals = helper_rv_json,     sbg_directory_path = system.file(       \"tests\", \"testthat\", \"sbgenomics_test\",       package = \"sbShinyModules\"     )   )   # Create reactive values list for the RDS file export   helper_rv_rds <- reactiveValues(     FUN = saveRDS,     args = list(       object = iris     ),     filename = NULL,     extension = \"RDS\",     overwrite = TRUE   )    observe(     helper_rv_rds$filename <- as.character(input$file_name_rds)   )    # Call the file exporter module   sbShinyModules::mod_save_file_generic_server(     id = \"rds_file_exporter\",     reac_vals = helper_rv_rds,     sbg_directory_path = system.file(       \"tests\", \"testthat\", \"sbgenomics_test\",       package = \"sbShinyModules\"     )   )    # Call the test module   test_module_server(id = \"nested_modules\") }  ###### Run the Shiny app ####### shinyApp(ui, server)"},{"path":"/reference/mod_save_file_generic_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"save_file_generic UI Function — mod_save_file_generic_ui","title":"save_file_generic UI Function — mod_save_file_generic_ui","text":"shiny Module.","code":""},{"path":"/reference/mod_save_file_generic_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"save_file_generic UI Function — mod_save_file_generic_ui","text":"","code":"mod_save_file_generic_ui(id, save_button_title = \"Save file\")"},{"path":"/reference/mod_save_file_generic_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"save_file_generic UI Function — mod_save_file_generic_ui","text":"id Module ID. save_button_title Button label.","code":""},{"path":"/reference/mod_save_file_generic_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"save_file_generic UI Function — mod_save_file_generic_ui","text":"value. Use UI & server shiny application.","code":""},{"path":"/reference/mod_save_plot_to_export_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Save `plot` for the export module server function — mod_save_plot_to_export_server","title":"Save `plot` for the export module server function — mod_save_plot_to_export_server","text":"server side shiny module allows users save  plots generated within Shiny app export project  Seven Bridges Platform.","code":""},{"path":"/reference/mod_save_plot_to_export_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save `plot` for the export module server function — mod_save_plot_to_export_server","text":"","code":"mod_save_plot_to_export_server(   id,   plot_reactVals,   output_formats = get_golem_config(\"PLOT_EXPORT_SUPPORTED_EXT\"),   module_title = \"Save plot for export\",   sbg_directory_path = \"/sbgenomics\",   btns_div_width = 12 )"},{"path":"/reference/mod_save_plot_to_export_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save `plot` for the export module server function — mod_save_plot_to_export_server","text":"id Module's ID. plot_reactVals `reactiveValues` variable slot `plot`  containing object created `recordPlot()` function  like save. Please, check example app inst/demos folder -  `plot_exporter_demo_app.R` demo module used.   Example:  “`r  helper_reactive <- reactiveValues(   plot = NULL  ) # observer eventReactive create plot  # recordPlot() end:  plot_output <- eventReactive(input$bins,  bins <- input$bins + 1 # Draw histogram specified number bins  faithful[, 2]     hist(      breaks = seq(min(.),                   max(.),                   length.= bins      ),      col = \"darkgray\",      border = \"white\",      main = \"Geyser eruption duration\"    )  helper_reactive$plot <- recordPlot()  ) output$distPlot <- renderPlot(    plot_output()  )  “` output_formats supported output formats. can subset : \"png\", \"pdf\", \"svg\", \"jpeg\", \"bmp\", \"tiff\". module_title Title (top left corner) modal (popup window) settings. sbg_directory_path Path mounted `sbgenomics` directory containing `project-files`, `output-files` `workspace` sub-directories instance. directories expected exist instance app run. purpose testing app locally, can create mock directory `sbgenomics` structure - containing sub-directories `project-files`, `output-files`, `workspace`, populate test files mimicking project file structure Platform. btns_div_width Width `div()` containing block buttons saving plots pop-modal dialogue. Suitable update one two buttons supported set. default value 12.","code":""},{"path":"/reference/mod_save_plot_to_export_server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save `plot` for the export module server function — mod_save_plot_to_export_server","text":"value. Use UI & server shiny application.","code":""},{"path":"/reference/mod_save_plot_to_export_server.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save `plot` for the export module server function — mod_save_plot_to_export_server","text":"","code":"library(shiny) library(magrittr) library(sbShinyModules)  # App's  UI ui <- fluidPage(   titlePanel(\"Save plots for the export to the Platform - Module Demo\"),   sidebarLayout(     sidebarPanel(       sliderInput(\"bins\",         \"Number of bins:\",         min = 1,         max = 50,         value = 30       )     ),     mainPanel(       plotOutput(\"distPlot\"),       fluidRow(         h3(\"Export Plot to the Platform\"),         br(),         sbShinyModules::mod_save_plot_to_export_ui(           id = \"plot_exporter\"         )       )     )   ) )  # App Server Logic server <- function(input, output, session) {   # Create reactive values list with the plot field   helper_reactive <- reactiveValues(     plot = NULL   )    plot_output <- eventReactive(input$bins, {     bins <- input$bins + 1      # Draw the histogram with the specified number of bins     faithful[, 2] %>%       hist(         breaks = seq(min(.),           max(.),           length.out = bins         ),         col = \"darkgray\",         border = \"white\",         main = \"Geyser eruption duration\"       )     helper_reactive$plot <- recordPlot()   })    output$distPlot <- renderPlot({     plot_output()   })    # Call the plot exporter module   sbShinyModules::mod_save_plot_to_export_server(     id = \"plot_exporter\",     plot_reactVals = helper_reactive,     module_title = \"Save plot to Platform\",     sbg_directory_path = system.file(       \"tests\", \"testthat\", \"sbgenomics_test\",       package = \"sbShinyModules\"     ),     btns_div_width = 12   ) }  # Run the Shiny app shinyApp(ui, server)"},{"path":"/reference/mod_save_plot_to_export_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Save `plot` for the export module UI function — mod_save_plot_to_export_ui","title":"Save `plot` for the export module UI function — mod_save_plot_to_export_ui","text":"UI part module can used save `plot`  export Seven Bridges Platform. UI contains button  triggers modal dialog settings.","code":""},{"path":"/reference/mod_save_plot_to_export_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save `plot` for the export module UI function — mod_save_plot_to_export_ui","text":"","code":"mod_save_plot_to_export_ui(id, save_button_title = \"Save plot\")"},{"path":"/reference/mod_save_plot_to_export_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save `plot` for the export module UI function — mod_save_plot_to_export_ui","text":"id Module ID. save_button_title Button label.","code":""},{"path":"/reference/mod_save_plot_to_export_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save `plot` for the export module UI function — mod_save_plot_to_export_ui","text":"value. Use UI & server shiny application.","code":""},{"path":"/reference/mod_save_plot_to_export_ui.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save `plot` for the export module UI function — mod_save_plot_to_export_ui","text":"","code":"library(shiny) library(magrittr) library(sbShinyModules)  # App's  UI ui <- fluidPage(   titlePanel(\"Save plots for the export to the Platform - Module Demo\"),   sidebarLayout(     sidebarPanel(       sliderInput(\"bins\",         \"Number of bins:\",         min = 1,         max = 50,         value = 30       )     ),     mainPanel(       plotOutput(\"distPlot\"),       fluidRow(         h3(\"Export Plot to the Platform\"),         br(),         sbShinyModules::mod_save_plot_to_export_ui(           id = \"plot_exporter\"         )       )     )   ) )  # App Server Logic server <- function(input, output, session) {   # Create reactive values list with the plot field   helper_reactive <- reactiveValues(     plot = NULL   )    plot_output <- eventReactive(input$bins, {     bins <- input$bins + 1      # Draw the histogram with the specified number of bins     faithful[, 2] %>%       hist(         breaks = seq(min(.),           max(.),           length.out = bins         ),         col = \"darkgray\",         border = \"white\",         main = \"Geyser eruption duration\"       )     helper_reactive$plot <- recordPlot()   })    output$distPlot <- renderPlot({     plot_output()   })    # Call the plot exporter module   sbShinyModules::mod_save_plot_to_export_server(     id = \"plot_exporter\",     plot_reactVals = helper_reactive,     module_title = \"Save plot to Platform\",     sbg_directory_path = system.file(       \"tests\", \"testthat\", \"sbgenomics_test\",       package = \"sbShinyModules\"     ),     btns_div_width = 12   ) }  # Run the Shiny app shinyApp(ui, server)"},{"path":"/reference/run_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the Shiny Application — run_app","title":"Run the Shiny Application — run_app","text":"Run Shiny Application","code":""},{"path":"/reference/run_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the Shiny Application — run_app","text":"","code":"run_app(   onStart = NULL,   options = list(),   enableBookmarking = NULL,   uiPattern = \"/\",   ... )"},{"path":"/reference/run_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the Shiny Application — run_app","text":"onStart function called app actually run. needed shinyAppObj, since shinyAppDir case, global.R file can used purpose. options Named options passed runApp call (can following: \"port\", \"launch.browser\", \"host\", \"quiet\", \"display.mode\" \"test.mode\"). can also specify width height parameters provide hint embedding environment ideal height/width app. enableBookmarking Can one \"url\", \"server\", \"disable\". default value, NULL, respect setting previous calls  enableBookmarking(). See enableBookmarking() information bookmarking app. uiPattern regular expression applied GET request determine whether ui used handle request. Note entire request path must match regular expression order match considered successful. ... arguments pass golem_opts. See `?golem::get_golem_options` details.","code":""},{"path":[]}]
